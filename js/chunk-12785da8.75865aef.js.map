{"version":3,"sources":["webpack:///./node_modules/core-js/internals/same-value.js","webpack:///./src/components/tree/BinarySearchTreeItem.vue?8fcd","webpack:///./src/views/BinarySearchTree.vue","webpack:///./src/components/Button.vue","webpack:///./src/components/Button.vue?7b91","webpack:///./src/components/Button.vue?1ccb","webpack:///./src/components/tree/BinarySearchTreeItem.vue","webpack:///./src/components/tree/BinarySearchTreeLine.vue","webpack:///./src/components/tree/BinarySearchTreeLine.vue?b014","webpack:///./src/components/tree/BinarySearchTreeLine.vue?df30","webpack:///./src/config/index.ts","webpack:///./src/use/UseBSTItem.ts","webpack:///./src/components/tree/BinarySearchTreeItem.vue?a091","webpack:///./src/components/tree/BinarySearchTreeItem.vue?629c","webpack:///./src/datastructure/BinarySearchTree.ts","webpack:///./src/datastructure/PriorityQueue.ts","webpack:///./src/use/UseBST.ts","webpack:///./src/views/BinarySearchTree.vue?8658","webpack:///./src/views/BinarySearchTree.vue?6716","webpack:///./src/views/BinarySearchTree.vue?8f49","webpack:///./node_modules/core-js/modules/es.string.search.js","webpack:///./src/components/Button.vue?d950","webpack:///./node_modules/core-js/modules/es.array.splice.js","webpack:///./src/components/tree/BinarySearchTreeLine.vue?5626"],"names":["module","exports","Object","is","x","y","class","operateGroup","group","i","params","line","value","ref","component","receiveInput","type","label","name","rules","handleClick","mode","controller","showSearch","bstHint","search","showMax","max","showMin","min","showPreOrderTraversal","preOrderTraversal","showMidOrderTraversal","midOrderTraversal","showPostOrderTraversal","postOrderTraversal","tree","root","handleReceiveRoot","node","pass-node","passNode","props","String","default","render","__scopeId","key","hasNodePass","nodeClick","left","right","receiveNodeLeft","receiveNodeRight","style","lineStyle","setup","height","isLeft","leftLine","rightLine","transform","leftAngle","rightAngle","initConfig","baseLineWidth","baseLineRotateZ","baseItemRate","baseNodeGap","baseLineOffset","baseLineTop","lineWidth","lineAngle","nodeWidth","lineExpandAngle","maxAngle","baseConfig","levelInterval","_this","args","$tree","$message","itemProperty","nodeLeft","nodeRight","initLeft","initRight","init","watchNode","v","setLineLength","$el","setLineAngle","offset","carsh","checkCarsh","length","expandCarsh","setOffsetLeft","top","Number","setPosition","initRoot","content","el","setNodeProperty","expand","setLineAngleAndHeightTheUnify","className","angle","relationLeft","elm","querySelector","child","nodeOffset","childOffset","heightLine","condition","verticalLine","setOffsetTop","parent","elmNode","produceCarsh","siblingList","filter","sibling","Math","abs","siblingOffset","nodeGap","gap","getSiblingNodes","checkExpand","result","push","isCarsh","isRoot","forEach","item","grandpa","searchGrandpaNode","expandAssignNode","Error","expandCarshFake","cycle","expandNodeGap","resetPointLineAngle","angleKey","expandAngle","newAngle","getChildrenAndExpandGap","children","expandCommon","childKey","success","expandCommonAbstract","getRoot","expandDirection","direction","getChildrenFlag","expandNode","equalParents","map","getParentEqual","equalParent","_carsh","__default__","components","BinarySearchTreeLine","Button","Boolean","use","lineHeight","_ctx","__setup__","ctx","BinarySearchTree","id","resetNode","data","level","parentId","Node","this","prototype","insert","handler","newNode","_insertNode","_preOrderTraversalNode","_midOrderTraversalNode","_postOrderTraversalNode","_searchNode","remove","current","isLeftChild","successor","_getSuccessor","delNode","successorParent","clear","_siblingNode","_childrenFlag","refer","parentEqual","_parentEqual","PriorityQueue","element","priority","items","enqueue","queueElement","isEmpty","added","splice","dequeue","shift","front","size","toString","pq","inputs","fileInputs","other","event","message","trigger","resetController","cycleExecute","_pq","time","_delay","console","log","treeMethods","getBoundingClientRect","index","mostValue","method","control","temp","orderTraversal","generateBST","files","json","JSON","parse","genBSTPQ","exportBST","bstArray","inputElm","$refs","rawFile","Input","BinarySearchTreeItem","context","fixRegExpWellKnownSymbolLogic","anObject","requireObjectCoercible","sameValue","regExpExec","SEARCH","nativeSearch","maybeCallNative","regexp","O","searcher","undefined","call","RegExp","res","done","rx","S","previousLastIndex","lastIndex","$","toAbsoluteIndex","toInteger","toLength","toObject","arraySpeciesCreate","createProperty","arrayMethodHasSpeciesSupport","HAS_SPECIES_SUPPORT","MAX_SAFE_INTEGER","MAXIMUM_ALLOWED_LENGTH_EXCEEDED","target","proto","forced","start","deleteCount","insertCount","actualDeleteCount","A","k","from","to","len","actualStart","argumentsLength","arguments","TypeError"],"mappings":"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","file":"js/chunk-12785da8.75865aef.js","sourcesContent":["// `SameValue` abstract operation\n// https://tc39.es/ecma262/#sec-samevalue\n// eslint-disable-next-line es/no-object-is -- safe\nmodule.exports = Object.is || function is(x, y) {\n  // eslint-disable-next-line no-self-compare -- NaN check\n  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;\n};\n","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js??ref--0-1!./BinarySearchTreeItem.vue?vue&type=style&index=0&id=3b29374f&scoped=true&lang=css\"","<template>\n  <div class=\"v-flex bst-operate\">\n    <!-- 增删改查 -->\n    <div v-for=\"(group, i) in operateGroup\" class=\"operate-group-item v-flex\">\n      <v-input\n        v-if=\"group.params === 'val'\"\n        class=\"bst-input\"\n        line\n        v-model=\"group.value\"\n        :ref=\"(component) => receiveInput(component, group)\"\n        :type=\"group.type\"\n        :label=\"group.name\"\n        :rules=\"group.rules\"\n        @keydown.enter=\"handleClick(group)\"\n      ></v-input>\n      <div v-else class=\"bst-input\"></div>\n      <v-btn class=\"bst-btn\" :value=\"group.name\" @click=\"handleClick(group)\"></v-btn>\n    </div>\n  </div>\n  <transition mode=\"out-in\">\n    <div class=\"bst-hint\">\n      <p v-if=\"controller.showSearch\" class=\"bst-hint-color\">\n        Found: {{ bstHint.search }}\n      </p>\n      <p v-if=\"controller.showMax\" class=\"bst-hint-color\">最大值: {{ bstHint.max }}</p>\n      <p v-if=\"controller.showMin\" class=\"bst-hint-color\">最小值: {{ bstHint.min }}</p>\n      <p v-if=\"controller.showPreOrderTraversal\" class=\"bst-hint-color\">\n        先序遍历: {{ bstHint.preOrderTraversal }}\n      </p>\n      <p v-if=\"controller.showMidOrderTraversal\" class=\"bst-hint-color\">\n        中序遍历: {{ bstHint.midOrderTraversal }}\n      </p>\n      <p v-if=\"controller.showPostOrderTraversal\" class=\"bst-hint-color\">\n        后序遍历: {{ bstHint.postOrderTraversal }}\n      </p>\n    </div>\n  </transition>\n  <div class=\"tree-wrapper v-flex\">\n    <div>\n      <binary-search-tree-item\n        v-if=\"tree.root\"\n        root\n        :ref=\"handleReceiveRoot\"\n        :node=\"tree.root\"\n        :pass-node=\"passNode\"\n      ></binary-search-tree-item>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, provide, inject } from \"vue\";\nimport Input from \"@/components/Input.vue\";\nimport Button from \"@/components/Button.vue\";\nimport BinarySearchTreeItem from \"@/components/tree/BinarySearchTreeItem.vue\";\nimport { IMessage } from \"@/interface/IUse\";\nimport { useBST } from '@/use/UseBST.ts';\n\nexport default defineComponent({\n  name: \"BinarySearchTree\",\n  components: {\n    \"v-input\": Input,\n    \"v-btn\": Button,\n    BinarySearchTreeItem,\n  },\n  setup(props, context) {\n    const $message: IMessage = inject(\"message\") as IMessage;\n\n    const use = useBST(props, context, { $message });\n    provide(\"tree\", use.tree.value);\n\n    return { ...use };\n  },\n});\n</script>\n\n<style scoped>\n.bst-input {\n  width: 50%;\n  margin-right: 20px;\n}\n.bst-btn {\n  flex-grow: 1;\n}\n.bst-hint-color {\n  color: #555;\n  font-size: 12px;\n}\n.bst-hint {\n  height: 57px;\n  padding: 20px;\n}\n.bst-operate {\n  flex-wrap: wrap;\n  justify-content: flex-start;\n}\n.operate-group-item {\n  width: 23%;\n  margin-right: 10px;\n  justify-content: space-around;\n  margin-bottom: 10px;\n}\n.tree-wrapper {\n  width: 100%;\n  justify-content: center;\n}\n</style>\n","<template>\n  <button v-ripple class=\"v-btn v-radius\">\n    <span>{{ value }}</span>\n  </button>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from \"vue\";\nexport default defineComponent({\n  props: {\n    value: {\n      type: String,\n      default: \"按钮\",\n    },\n  }\n});\n</script>\n\n<style scoped>\n.v-btn {\n  height: 36px;\n  padding: 0 16px;\n  color: #eee;\n  text-decoration: none;\n  text-transform: uppercase;\n  background: linear-gradient(90deg, #0162c8, #55e7fc);\n  border: none;\n  outline: none;\n  transition: all .25s ease-out;\n  box-shadow: 0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12);\n}\n\n.v-btn:hover {\n  color: #fff;\n  background: linear-gradient(90deg, #2d85e2, #45e6ff);\n}\n.v-btn:focus {\n  outline: none;\n}\n</style>","\nimport { defineComponent } from \"vue\";\nexport default defineComponent({\n  props: {\n    value: {\n      type: String,\n      default: \"按钮\",\n    },\n  }\n});\n","import { render } from \"./Button.vue?vue&type=template&id=b680969c&scoped=true\"\nimport script from \"./Button.vue?vue&type=script&lang=ts\"\nexport * from \"./Button.vue?vue&type=script&lang=ts\"\n\nimport \"./Button.vue?vue&type=style&index=0&id=b680969c&scoped=true&lang=css\"\nscript.render = render\nscript.__scopeId = \"data-v-b680969c\"\n\nexport default script","<template>\n  <div v-if=\"node\" class=\"binary-search-tree-item-wrapper\">\n    <!-- 实际渲染的节点 -->\n    <div class=\"binary-search-tree-item-root-wrapper\">\n      <!-- 根节点 -->\n      <transition mode=\"out-in\">\n        <div\n          v-if=\"node.key\"\n          class=\"binary-search-tree-item v-shadow v-flex\"\n          :class=\"{ 'bst-pass-node': hasNodePass }\"\n          v-ripple\n          @click=\"nodeClick(node.key)\"\n        >\n          {{ node.key }}\n        </div>\n      </transition>\n\n      <!-- 两条边 -->\n      <div class=\"binary-search-tree-line-wrapper\">\n        <transition mode=\"out-in\">\n          <binary-search-tree-line\n            v-if=\"node.left\"\n            :node=\"node.left\"\n            class=\"binary-search-tree-line-left\"\n          ></binary-search-tree-line>\n        </transition>\n\n        <transition mode=\"out-in\">\n          <binary-search-tree-line\n            v-if=\"node.right\"\n            :node=\"node.right\"\n            class=\"binary-search-tree-line-right\"\n          ></binary-search-tree-line>\n        </transition>\n      </div>\n    </div>\n\n    <!-- 左节点 -->\n    <transition mode=\"out-in\">\n      <binary-search-tree-item\n        v-if=\"node.left\"\n        class=\"binary-search-tree-item-left\"\n        type=\"left\"\n        :ref=\"receiveNodeLeft\"\n        :node=\"node.left\"\n        :pass-node=\"passNode\"\n      ></binary-search-tree-item>\n    </transition>\n\n    <!-- 右节点 -->\n    <transition mode=\"out-in\">\n      <binary-search-tree-item\n        v-if=\"node.right\"\n        class=\"binary-search-tree-item-right\"\n        type=\"right\"\n        :ref=\"receiveNodeRight\"\n        :node=\"node.right\"\n        :pass-node=\"passNode\"\n      ></binary-search-tree-item>\n    </transition>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport Button from \"@/components/Button.vue\";\nimport BinarySearchTreeLine from \"@/components/tree/BinarySearchTreeLine.vue\";\nimport { defineComponent, PropType, inject, nextTick, onMounted } from \"vue\";\nimport { useBSTItem } from \"@/use/UseBSTItem.ts\";\nimport { INode } from \"@/interface\";\nimport { IMessage } from \"@/interface/IUse\";\nimport { baseConfig, initConfig } from \"@/config\";\n\nexport default defineComponent({\n  name: \"BinarySearchTreeItem\",\n  components: {\n    BinarySearchTreeLine,\n    \"v-btn\": Button,\n  },\n  props: {\n    node: Object as PropType<INode>,\n    passNode: {\n      type: [String, Number],\n      default: -1,\n    },\n    root: Boolean,\n    type: String\n  },\n  setup(props, content) {\n    const $tree = inject(\"tree\", null);\n    const $message: IMessage = inject(\"message\") as IMessage;\n    \n    const use = useBSTItem(props, content, { $tree, $message });\n    const lineHeight = baseConfig.levelInterval - initConfig.nodeWidth;\n    // 初始化根节点\n    onMounted(() => nextTick(() => props.root && use.initRoot(props.node as INode)));\n\n    return {\n      lineHeight,\n      initConfig,\n      ...use\n    };\n  }\n});\n</script>\n\n<style scoped>\n@import \"../../styles/bstItem.css\";\n.binary-search-tree-line-wrapper {\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  position: absolute;\n  left: 0;\n  top: 0;\n}\n.binary-search-tree-item {\n  width: v-bind(\"initConfig.nodeWidth + 'px'\");\n  height: v-bind(\"initConfig.nodeWidth + 'px'\");\n}\n.binary-search-tree-line-left,\n.binary-search-tree-line-right {\n  position: absolute;\n  top: 22.5px;\n}\n</style>\n","<template>\r\n  <div class=\"binary-search-tree-line\" :style=\"lineStyle\">\r\n    <div class=\"arrows\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, PropType } from \"vue\";\r\nimport { INode } from \"@/interface\"\r\nexport default defineComponent({\r\n  props: {\r\n    node: Object as PropType<INode>\r\n  },\r\n  setup(props) {\r\n\r\n    // 只做一次初始化, 后面的变化让dom来操作, 这里不要写成computed 会有问题\r\n    const lineStyle = {\r\n      height: `${props.node?.isLeft ? props.node?.leftLine : props.node?.rightLine}px`,\r\n      transform: `rotateZ(${props.node?.isLeft ? props.node?.leftAngle : props.node?.rightAngle}deg)`\r\n    };\r\n\r\n\r\n    return { lineStyle };\r\n  },\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n.binary-search-tree-line {\r\n  width: 1px;\r\n  background-color: #02273a;\r\n  position: relative;\r\n  transform-origin: top left;\r\n  z-index: -2;\r\n}\r\n.arrows {\r\n  border: 4px solid ;\r\n  border-color: transparent #02273a #02273a transparent;\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: -3.5px;\r\n  transform: rotateZ(50deg);\r\n}\r\n</style>","\r\nimport { defineComponent, PropType } from \"vue\";\r\nimport { INode } from \"@/interface\"\r\nexport default defineComponent({\r\n  props: {\r\n    node: Object as PropType<INode>\r\n  },\r\n  setup(props) {\r\n\r\n    // 只做一次初始化, 后面的变化让dom来操作, 这里不要写成computed 会有问题\r\n    const lineStyle = {\r\n      height: `${props.node?.isLeft ? props.node?.leftLine : props.node?.rightLine}px`,\r\n      transform: `rotateZ(${props.node?.isLeft ? props.node?.leftAngle : props.node?.rightAngle}deg)`\r\n    };\r\n\r\n\r\n    return { lineStyle };\r\n  },\r\n});\r\n","import { render } from \"./BinarySearchTreeLine.vue?vue&type=template&id=07c15265&scoped=true\"\nimport script from \"./BinarySearchTreeLine.vue?vue&type=script&lang=ts\"\nexport * from \"./BinarySearchTreeLine.vue?vue&type=script&lang=ts\"\n\nimport \"./BinarySearchTreeLine.vue?vue&type=style&index=0&id=07c15265&scoped=true&lang=css\"\nscript.render = render\nscript.__scopeId = \"data-v-07c15265\"\n\nexport default script","import { reactive } from \"vue\";\r\nimport { IBaseConfig } from \"@/interface\";\r\nimport { BaseConfigLiteral } from \"@/enum\";\r\n\r\nconst bstConfig = reactive({\r\n  baseLineWidth: 30, // 指针高度\r\n  baseLineRotateZ: 220, // 指针角度\r\n  baseItemRate: 200, // 节点角度\r\n  baseNodeGap: 27, // 两个节点相隔距离\r\n\r\n  baseLineOffset: 8, // 指针的left\r\n  baseLineTop: 40, // 指针的top\r\n});\r\n\r\n// 初始化配置\r\nconst initConfig: {\r\n  lineWidth: number;\r\n  lineAngle: number;\r\n  baseLineTop: number;\r\n  baseLineOffset: number;\r\n  baseNodeGap: number;\r\n  nodeWidth: number;\r\n  lineExpandAngle: number;\r\n  maxAngle: number;\r\n} = {\r\n  lineWidth: 36, // 指针长度\r\n  lineAngle: 40, // 指针角度\r\n  baseLineTop: 40, // 指针的top\r\n  baseLineOffset: 8, // 指针的left\r\n  baseNodeGap: 35,  // 两个节点相隔距离\r\n  nodeWidth: 45, // 节点宽度\r\n  lineExpandAngle: 15, // 指针扩容时, 每次扩容角度\r\n  maxAngle: 70  // 指针最大角度\r\n};\r\n\r\n// 基础配置\r\nconst baseConfig: IBaseConfig = reactive<IBaseConfig>({\r\n  levelInterval: 48, // 父节点和子节点的距离\r\n});\r\n\r\nconst setConfig = (key: BaseConfigLiteral, value: any) => {\r\n  baseConfig[key] = value;\r\n};\r\n\r\nexport { bstConfig, initConfig, baseConfig, setConfig };\r\n","/* 引入依赖API */\r\nimport { reactive, watch, nextTick, computed } from \"vue\";\r\nimport { INode, IVElement, IBinarySearchTree } from \"@/interface\";\r\nimport { checkExpand } from \"@/interface/IUse\";\r\nimport { initConfig, baseConfig } from \"@/config\";\r\n\r\ntype ItemType = \"right\" | \"left\";\r\n\r\n/* 定义一些变量(全局变量) */\r\n\r\nconst useBSTItem = <T>(props: any, _this: any, args?: T & any) => {\r\n  const { $tree, $message } = args;\r\n  /* 定义一些变量(局部变量) */\r\n  const itemProperty = reactive({\r\n    nodeLeft: null,     // 左子节点\r\n    nodeRight: null,    // 右子节点\r\n    initLeft: false,    // 是否初始化左子节点\r\n    initRight: false    // 是否初始化右子节点\r\n  });\r\n\r\n  /* 监听属性 */\r\n  watch(() => itemProperty.nodeLeft, (nodeLeft) => {\r\n    if (!itemProperty.initLeft && nodeLeft) {\r\n      init(\"left\", nodeLeft);\r\n      itemProperty.initLeft = true;\r\n    }\r\n  });\r\n\r\n  watch(() => itemProperty.nodeRight, (nodeRight) => {\r\n    if (!itemProperty.initRight && nodeRight) {\r\n      init(\"right\", nodeRight)\r\n      itemProperty.initRight = true;\r\n    }\r\n  });\r\n\r\n  // 监听节点信息\r\n  const watchNode = (node: any) => {\r\n    /**\r\n     * leftLine:    左边指针长度\r\n     * rightLine:   右边指针长度\r\n     * leftAngle:   左边指针角度\r\n     * rightAngle:  右边指针角度\r\n     * offset:      当前节点左偏移量(style.left)\r\n     * top:         当前节点上偏移量(style.top)\r\n    */\r\n    /* 监听左指针长度 */\r\n    watch(() => node.leftLine, (v) => setLineLength(node, node.$el, 'left', v));\r\n    /* 监听右指针长度 */\r\n    watch(() => node.rightLine, (v) => setLineLength(node, node.$el, 'right', v));\r\n    /* 监听左指针角度 */\r\n    watch(() => node.leftAngle, (v) => setLineAngle(node, v, 'left'));\r\n    /* 监听右指针角度 */\r\n    watch(() => node.rightAngle, (v) => setLineAngle(node, v, 'right'));\r\n    /* 监听左偏移量 */\r\n    watch(() => node.offset, (v) => {\r\n      const carsh = checkCarsh(node);\r\n      (carsh.length > 0) && expandCarsh(node, carsh);\r\n      setOffsetLeft(node.$el, v);\r\n    });\r\n    /* 监听右偏移量 */\r\n    watch(() => node.top, (v) => setOffsetLeft(node.$el, v));\r\n  };\r\n\r\n  /* 计算属性 */\r\n  const hasNodePass = computed(() => props.node ? Number(props.node.key) === Number(props.passNode) : false);\r\n\r\n  /* 定义方法 */\r\n  // 接收子节点, 并调整其位置\r\n  const init = (type: ItemType, component: any) => {\r\n    if (!component) return false;\r\n    nextTick(() => setPosition(component.$el, props.node[type], type));\r\n  };\r\n\r\n  // 初始化根节点\r\n  const initRoot = (node: INode) => watchNode(node);\r\n\r\n  // 节点被点击\r\n  const nodeClick = (key: number) => $message({ type: 'info', content: `节点: ${key}` });\r\n\r\n  // 设置当前子节点的位置\r\n  const setPosition = (el: IVElement, node: INode, type: ItemType) => {\r\n    // 设置节点属性\r\n    setNodeProperty(el, node);\r\n\r\n    // 监控当前节点\r\n    watchNode(node);\r\n\r\n    // 扩容\r\n    expand(node, type);\r\n  };\r\n\r\n  // 统一设置指针线段的角度和长度\r\n  const setLineAngleAndHeightTheUnify = (node: INode, className: string, angle: number) => {\r\n    const el = node.$el;\r\n    // @ts-ignore\r\n    const relationLeft = node.relationLeft;\r\n    const elm = el.querySelector(className);\r\n\r\n    elm.style.transform = `rotateZ(${angle}deg)`;\r\n\r\n    let child = node.right;\r\n    let nodeOffset = node.offset;\r\n    let childOffset = 0;\r\n    // 如果新插入的节点位于扩容节点的左子树\r\n    if (relationLeft) {\r\n      child = node.left;\r\n      nodeOffset -= initConfig.nodeWidth;\r\n      childOffset = child.offset;\r\n    } else {\r\n      childOffset = child.offset - initConfig.nodeWidth;\r\n    }\r\n\r\n    const heightLine = initConfig.lineWidth;\r\n    const condition = nodeOffset > childOffset;\r\n    const verticalLine = condition ? nodeOffset - childOffset : childOffset - nodeOffset;\r\n    const height = (heightLine + verticalLine);\r\n    setLineLength(node, null, relationLeft ? 'left' : 'right', height, elm);\r\n  }\r\n\r\n  // 设置节点左偏移量\r\n  const setOffsetLeft = (el: IVElement, offset: number) => (el.style.left = `${offset}px`);\r\n  // 设置节点上偏移量\r\n  const setOffsetTop = (el: IVElement, top: number) => (el.style.top = `${top}px`);\r\n  // 设置指针角度\r\n  const setLineAngle = (node: INode, angle: number, type: ItemType) => setLineAngleAndHeightTheUnify(node, `.binary-search-tree-line-${type}`, angle);\r\n  // 设置指针长度\r\n  const setLineLength = (node: INode, parent: HTMLElement | null, type: ItemType | null, value: number, elmNode?: HTMLElement) => {\r\n    if (value > 90) value = 90;\r\n    if (elmNode) {\r\n      elmNode.style.height = `${value}px`;\r\n    } else {\r\n      const elm = parent?.querySelector(`.binary-search-tree-line-${type}`);\r\n      (elm as HTMLElement).style.height = `${value}px`;\r\n    }\r\n    type === 'left' ? (node.leftLine = value) : (node.rightLine = value);\r\n\r\n  }\r\n\r\n  // 设置节点属性\r\n  const setNodeProperty = (el: IVElement, node: INode) => {\r\n    setOffsetLeft(el, node.offset);\r\n    setOffsetTop(el, node.top);\r\n    node.$el = el;\r\n  };\r\n\r\n  // 寻找产生碰撞的节点\r\n  const produceCarsh: (n: INode, s: Array<INode>) => Array<INode> = (node, siblingList) => {\r\n    return siblingList.filter(sibling => {\r\n      const nodeOffset = Math.abs(node.offset);\r\n      const siblingOffset = Math.abs(sibling.offset);\r\n      const nodeGap = initConfig.baseNodeGap;\r\n      // 如果sibling的key比当前节点的key大, 那就是sibling - node, 否则node - sibling\r\n      const condition = sibling.key > node.key;\r\n      const gap = condition ? siblingOffset - nodeOffset : nodeOffset - siblingOffset;\r\n      return gap < nodeGap;\r\n    });\r\n  };\r\n\r\n  // 碰撞检测\r\n  const checkCarsh: (n: INode) => Array<INode> = (node) => {\r\n    const siblingList = $tree.getSiblingNodes(node);\r\n    if (siblingList.length > 0) {\r\n      // 2.1.拿到碰撞节点\r\n      const carsh = produceCarsh(node, siblingList);\r\n      // 2.2.产生了碰撞\r\n      return carsh;\r\n    }\r\n    return [];\r\n  }\r\n\r\n  // 检查是否需要扩容\r\n  const checkExpand: checkExpand = (node) => {\r\n    /**\r\n     * 扩容的两条规则\r\n     * 1.当前子节点与父节点的type相反(父节点不为root), 只扩容(节点宽度/2)+(gap/2)的距离 \r\n     *  -> 同级子节点的相同父节点的父节点(前提是如果父节点不为root, 如果父节点为root则直接扩容root)\r\n     * 2.两个节点发生碰撞, 扩容 节点宽度 + gap 的距离 \r\n     *  -> 扩容当前子节点与碰撞子节点的共同父节点的父节点(前提是如果父节点不为root, 如果父节点为root则直接扩容root)\r\n    */\r\n    const result = [];\r\n\r\n    // 1.获取节点\r\n    // 1.1.拿到父节点\r\n    const parent = node.parent;\r\n\r\n    // 2.先检测是否发生碰撞(第二个扩容规则)\r\n    const carsh = checkCarsh(node);\r\n    // 2.2.产生了碰撞\r\n    if (carsh.length > 0) result.push({ expand: true, carsh, isCarsh: true });\r\n\r\n    // 3.判断第一个扩容规则, 找到同级子节点, 直接作为碰撞节点返回\r\n    if (!parent.isRoot && node.isLeft !== parent.isLeft) {\r\n      // 3.1.拿到兄弟节点\r\n      const siblingList = $tree.getSiblingNodes(node);\r\n      // 3.2.如果返回的carsh为空数组, 则直接扩容根节点, 这里好像应该扩容 父级的父级节点(爷爷节点)\r\n      const carsh = produceCarsh(node, siblingList);\r\n      result.push({ expand: true, carsh, isCarsh: false });\r\n    }\r\n    return result;\r\n  };\r\n\r\n  // 扩容\r\n  const expand = (node: INode, type: ItemType) => {\r\n    const result = checkExpand(node);\r\n    if (result.length > 0) {\r\n      result.forEach(item => {\r\n        const { expand, carsh, isCarsh } = item;\r\n        // 代表需要扩容\r\n        if (expand) {\r\n          // 直接扩容根节点, 好像是扩容父级的父级节点\r\n          if (carsh.length < 1 && !isCarsh) {\r\n            // expandRoot(node);\r\n            // 在扩容根节点的基础上, 再扩容一下其他节点\r\n            const grandpa = $tree.searchGrandpaNode(node);\r\n            expandAssignNode(grandpa, node);\r\n          }\r\n          // 与碰撞扩容规则一样, 只是扩容大小不同(伪碰撞扩容)\r\n          if (carsh.length > 0 && !isCarsh) {\r\n            if (carsh.length > 1) throw new Error(\"碰撞节点不该为多个\");\r\n            expandCarshFake(node, carsh);\r\n          }\r\n          // 碰撞扩容\r\n          if (isCarsh) {\r\n            expandCarsh(node, carsh);\r\n          }\r\n        }\r\n      })\r\n    }\r\n  };\r\n\r\n  // 扩容子节点\r\n  const cycle = (node: INode, isLeft: boolean, expandNodeGap: number) => {\r\n    if (node) {\r\n      const offset = node.offset;\r\n      // 如果是左子树, 就像左移(减少), 如果是右子树 就向右移(增加)\r\n      node.offset = isLeft ? (offset - expandNodeGap) : (offset + expandNodeGap);\r\n      cycle(node.left, isLeft, expandNodeGap);\r\n      cycle(node.right, isLeft, expandNodeGap);\r\n    }\r\n  };\r\n\r\n  // 改变指针角度\r\n  const resetPointLineAngle: (n: INode, l: boolean) => boolean = (node, isLeft) => {\r\n    const angleKey = isLeft ? \"leftAngle\" : \"rightAngle\";\r\n    const expandAngle = initConfig.lineExpandAngle;\r\n    const newAngle = isLeft ? (node[angleKey] + expandAngle) : (node[angleKey] - expandAngle);\r\n    // 如果新的角度小于等于最大角度才会赋值\r\n    if (Math.abs(newAngle) <= initConfig.maxAngle) {\r\n      node[angleKey] = newAngle;\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  // 获取子树以及扩容间隔\r\n  const getChildrenAndExpandGap: (node: INode, key: ItemType) => { children: INode, expandNodeGap: number } = (node, key) => {\r\n    const children = node[key];\r\n    const expandNodeGap = baseConfig.levelInterval / 2 + 10;\r\n    return { children, expandNodeGap };\r\n  }\r\n\r\n  // 统一扩容\r\n  const expandCommon = (node: INode, isLeft: boolean, childKey: ItemType) => {\r\n    // 2.1.改变指针角度\r\n    const success = resetPointLineAngle(node, isLeft);\r\n    if (success) {\r\n      // 3.对 左子树/右子树 进行统一 左/右 移动\r\n      // 3.1.拿到子树和扩容间隔\r\n      const { children, expandNodeGap } = getChildrenAndExpandGap(node, childKey);\r\n      // 3.2.对子树所有节点进行扩容操作\r\n      cycle(children, isLeft, expandNodeGap);\r\n    } else {\r\n      // 如果要扩容的节点角度达到了临界值, 则取对应子树的第一个子节点作为扩容节点\r\n      // @ts-ignore\r\n      node[childKey].relationLeft = node.relationLeft;\r\n      expandCommon(node[childKey], isLeft, childKey);\r\n    }\r\n  }\r\n  // 通用扩容抽象\r\n  const expandCommonAbstract = (node: INode, expand: INode = $tree.getRoot()) => {\r\n    // 找到node属于expandNode的左子树还是右子树\r\n    const { direction, isLeft } = expandDirection(node, expand);\r\n    expand.relationLeft = isLeft;\r\n    expandCommon(expand, isLeft, direction);\r\n  }\r\n  // 获取扩容方向\r\n  const expandDirection: (n: INode, p?: INode) => { direction: ItemType, isLeft: boolean } = (node, parent) => {\r\n    const direction: ItemType = $tree.getChildrenFlag(node, parent);\r\n    const isLeft = direction === \"left\";\r\n    return { direction, isLeft };\r\n  }\r\n\r\n  // 指定扩容某个节点\r\n  const expandAssignNode = (expandNode: INode, node: INode) => expandCommonAbstract(node, expandNode);\r\n\r\n  // 伪碰撞扩容\r\n  const expandCarshFake = (node: INode, carsh: Array<INode>) => {\r\n    // 1.找到共同父节点\r\n    const equalParents: Array<INode> = carsh.map((item: INode) => $tree.getParentEqual(node, item));\r\n    if (equalParents.length > 1) throw new Error(\"共同父节点不该为多个\");\r\n    if (equalParents.length < 1) throw new Error(\"共同节点少于一个\");\r\n    const equalParent: INode = equalParents[0];\r\n    // 2.确认要扩容的子树方向\r\n    const { direction, isLeft } = expandDirection(node, equalParent);\r\n    // 3.改变指针角度\r\n    // @ts-ignore\r\n    equalParent.relationLeft = isLeft;\r\n    expandCommon(equalParent, isLeft, direction);\r\n  };\r\n\r\n  // 碰撞扩容, 扩容之前再检测一遍 是否真实碰撞\r\n  const expandCarsh = (node: INode, carsh: Array<INode>) => {\r\n    nextTick(() => {\r\n      const _carsh = checkCarsh(node);\r\n      if (_carsh.length > 0) {\r\n        // 进行扩容操作\r\n        // 1.找到共同父节点\r\n        expandCarshFake(node, _carsh);\r\n      }\r\n    });\r\n  };\r\n\r\n  /* 接收子节点 */\r\n  const receiveNodeLeft = (component: any) => (itemProperty.nodeLeft = component);\r\n  const receiveNodeRight = (component: any) => (itemProperty.nodeRight = component);\r\n\r\n  /* 统一暴露 */\r\n  return {\r\n    initRoot,\r\n    itemProperty,\r\n    hasNodePass,\r\n    receiveNodeLeft,\r\n    receiveNodeRight,\r\n    nodeClick\r\n  };\r\n};\r\n\r\nexport default useBSTItem;\r\nexport { useBSTItem };\r\n","\nimport Button from \"@/components/Button.vue\";\nimport BinarySearchTreeLine from \"@/components/tree/BinarySearchTreeLine.vue\";\nimport { defineComponent, PropType, inject, nextTick, onMounted } from \"vue\";\nimport { useBSTItem } from \"@/use/UseBSTItem.ts\";\nimport { INode } from \"@/interface\";\nimport { IMessage } from \"@/interface/IUse\";\nimport { baseConfig, initConfig } from \"@/config\";\n\nconst __default__ = defineComponent({\n  name: \"BinarySearchTreeItem\",\n  components: {\n    BinarySearchTreeLine,\n    \"v-btn\": Button,\n  },\n  props: {\n    node: Object as PropType<INode>,\n    passNode: {\n      type: [String, Number],\n      default: -1,\n    },\n    root: Boolean,\n    type: String\n  },\n  setup(props, content) {\n    const $tree = inject(\"tree\", null);\n    const $message: IMessage = inject(\"message\") as IMessage;\n    \n    const use = useBSTItem(props, content, { $tree, $message });\n    const lineHeight = baseConfig.levelInterval - initConfig.nodeWidth;\n    // 初始化根节点\n    onMounted(() => nextTick(() => props.root && use.initRoot(props.node as INode)));\n\n    return {\n      lineHeight,\n      initConfig,\n      ...use\n    };\n  }\n});\n\nimport { useCssVars as _useCssVars } from 'vue'\nconst __injectCSSVars__ = () => {\n_useCssVars(_ctx => ({\n  \"bbb816ea-initConfig_nodeWidth____px_\": (_ctx.initConfig.nodeWidth + 'px'),\n  \"bbb816ea-initConfig_nodeWidth____px_\": (_ctx.initConfig.nodeWidth + 'px')\n}))}\nconst __setup__ = __default__.setup\n__default__.setup = __setup__\n  ? (props, ctx) => { __injectCSSVars__();return __setup__(props, ctx) }\n  : __injectCSSVars__\n\nexport default __default__","import { render } from \"./BinarySearchTreeItem.vue?vue&type=template&id=3b29374f&scoped=true\"\nimport script from \"./BinarySearchTreeItem.vue?vue&type=script&lang=ts\"\nexport * from \"./BinarySearchTreeItem.vue?vue&type=script&lang=ts\"\n\nimport \"./BinarySearchTreeItem.vue?vue&type=style&index=0&id=3b29374f&scoped=true&lang=css\"\nscript.render = render\nscript.__scopeId = \"data-v-3b29374f\"\n\nexport default script","import {\r\n  IBinarySearchTreeKey,\r\n  IBinarySearchTree,\r\n  ITraversalCallBack,\r\n  IInsertCallback,\r\n  INode\r\n} from \"@/interface\";\r\nimport {\r\n  initConfig\r\n} from \"@/config\";\r\n\r\nfunction BinarySearchTree() {\r\n  let id = 0;\r\n\r\n  function resetNode(data: INode, node: INode) {\r\n    const { offset, isLeft, isRoot, parent, top, level } = data;\r\n    node.offset = offset;\r\n    node.isLeft = isLeft;\r\n    node.isRoot = isRoot;\r\n    node.parent = parent;\r\n    node.parentId = parent?.id;\r\n    node.top = top;\r\n    node.level = level;\r\n    return node;\r\n  }\r\n\r\n  // @ts-ignore\r\n  function Node(key: IBinarySearchTreeKey): INode {\r\n    this.id = id++;\r\n    this.parent = null;\r\n    this.parentId = null;\r\n    this.level = null;\r\n    this.$el = null;\r\n    this.left = null;\r\n    this.key = key;\r\n    this.right = null;\r\n    this.isLeft = false;\r\n    this.top = 0;\r\n    this.offset = 0;\r\n    this.isRoot = false;\r\n    this.leftLine = initConfig.lineWidth;\r\n    this.rightLine = initConfig.lineWidth;\r\n    this.leftAngle = initConfig.lineAngle;\r\n    this.rightAngle = -initConfig.lineAngle;\r\n  }\r\n\r\n  // 属性\r\n  this.root = null;\r\n\r\n  //方法\r\n  // 插入数据: 对外给用户调用的方法\r\n  BinarySearchTree.prototype.insert = function(\r\n    key: IBinarySearchTreeKey,\r\n    handler: IInsertCallback\r\n  ) {\r\n    // 1.根据key创建新节点\r\n    // @ts-ignore\r\n    const newNode: INode = new Node(key);\r\n\r\n    // 2.判断根节点是否有值\r\n    if (this.root) {\r\n      this._insertNode(this.root, newNode, handler);\r\n    } else {\r\n      resetNode(handler(null), newNode);\r\n      this.root = newNode;\r\n    }\r\n  };\r\n\r\n  // 递归方法\r\n  BinarySearchTree.prototype._insertNode = function(\r\n    node: INode,\r\n    newNode: INode,\r\n    handler: IInsertCallback\r\n  ) {\r\n    // 向左或向右查找\r\n    const key = newNode.key < node.key ? \"left\" : \"right\";\r\n    if (node[key]) {\r\n      this._insertNode(node[key], newNode, handler);\r\n    } else {\r\n      resetNode({ ...handler(node, key), parent: node }, newNode);\r\n      node[key] = newNode;\r\n    }\r\n  };\r\n\r\n  // 树的遍历\r\n  // 1.先序遍历\r\n  BinarySearchTree.prototype.preOrderTraversal = function(\r\n    handler: ITraversalCallBack\r\n  ) {\r\n    this._preOrderTraversalNode(this.root, handler);\r\n  };\r\n\r\n  BinarySearchTree.prototype._preOrderTraversalNode = function(\r\n    node: IBinarySearchTree,\r\n    handler: ITraversalCallBack\r\n  ) {\r\n    if (node) {\r\n      // 1.处理经过的节点\r\n      handler(node.key);\r\n\r\n      // 2.处理经过节点的左节点\r\n      this._preOrderTraversalNode(node.left, handler);\r\n\r\n      // 3.处理经过节点的右节点\r\n      this._preOrderTraversalNode(node.right, handler);\r\n    }\r\n  };\r\n\r\n  // 2.中序遍历\r\n  BinarySearchTree.prototype.midOrderTraversal = function(\r\n    handler: ITraversalCallBack\r\n  ) {\r\n    this._midOrderTraversalNode(this.root, handler);\r\n  };\r\n\r\n  BinarySearchTree.prototype._midOrderTraversalNode = function(\r\n    node: IBinarySearchTree,\r\n    handler: ITraversalCallBack\r\n  ) {\r\n    if (node) {\r\n      // 1.处理经过节点的左子树\r\n      this._midOrderTraversalNode(node.left, handler);\r\n      // 2.处理经过的节点\r\n      handler(node.key);\r\n      // 3.处理经过节点的右子树\r\n      this._midOrderTraversalNode(node.right, handler);\r\n    }\r\n  };\r\n\r\n  // 3.后序遍历\r\n  BinarySearchTree.prototype.postOrderTraversal = function(\r\n    handler: ITraversalCallBack\r\n  ) {\r\n    this._postOrderTraversalNode(this.root, handler);\r\n  };\r\n\r\n  BinarySearchTree.prototype._postOrderTraversalNode = function(\r\n    node: IBinarySearchTree,\r\n    handler: ITraversalCallBack\r\n  ) {\r\n    if (node) {\r\n      this._postOrderTraversalNode(node.left, handler);\r\n      this._postOrderTraversalNode(node.right, handler);\r\n      handler(node.key);\r\n    }\r\n  };\r\n\r\n  // 获取最大值\r\n  BinarySearchTree.prototype.max = function(\r\n    handler: ITraversalCallBack\r\n  ): number | \"\" {\r\n    let node = this.root;\r\n    if (node) {\r\n      while (node.right) {\r\n        handler(node.key);\r\n        node = node.right;\r\n      }\r\n      handler(node.key);\r\n      return node.key;\r\n    }\r\n    return \"\";\r\n  };\r\n\r\n  // 获取最小值\r\n  BinarySearchTree.prototype.min = function(\r\n    handler: ITraversalCallBack\r\n  ): number | \"\" {\r\n    let node = this.root;\r\n    if (node) {\r\n      while (node.left) {\r\n        handler(node.key);\r\n        node = node.left;\r\n      }\r\n      handler(node.key);\r\n      return node.key;\r\n    }\r\n    return \"\";\r\n  };\r\n\r\n  // 搜索一个指定的key\r\n  BinarySearchTree.prototype.search = function(\r\n    key: IBinarySearchTreeKey,\r\n    handler: ITraversalCallBack\r\n  ) {\r\n    this._searchNode(this.root, key, handler);\r\n  };\r\n\r\n  BinarySearchTree.prototype._searchNode = function(\r\n    node: IBinarySearchTree,\r\n    key: IBinarySearchTreeKey,\r\n    handler: ITraversalCallBack\r\n  ) {\r\n    handler(node.key);\r\n    if (key < node.key) {\r\n      this._searchNode(node.left, key, handler);\r\n    } else if (key > node.key) {\r\n      this._searchNode(node.right, key, handler);\r\n    }\r\n  };\r\n\r\n  // 删除节点\r\n  BinarySearchTree.prototype.remove = function(\r\n    key: IBinarySearchTreeKey,\r\n    handler: ITraversalCallBack\r\n  ): boolean {\r\n    // 1.寻找要删除的节点\r\n    // 1.1.定义变量, 保存一些信息\r\n    let current = this.root;\r\n    let parent = null;\r\n    let isLeftChild = true;\r\n\r\n    // 1.2开始寻找删除的节点\r\n    while (current.key !== key) {\r\n      handler(current.key);\r\n      parent = current;\r\n      if (key < current.key) {\r\n        isLeftChild = true;\r\n        current = current.left;\r\n      } else {\r\n        isLeftChild = false;\r\n        current = current.right;\r\n      }\r\n      // 某些情况: 已经找到了最后的节点, 依然没有找到===key\r\n      if (current === null) return false;\r\n    }\r\n\r\n    // 2.根据对应的情况删除节点 -> 找到了current.key === key\r\n    // 2.1删除的节点是叶子节点(没有子节点)\r\n    if (!current.left && !current.right) {\r\n      // 要删除的是根节点\r\n      if (current.key === this.root.key) {\r\n        this.root = null;\r\n      } else {\r\n        isLeftChild ? (parent.left = null) : (parent.right = null);\r\n      }\r\n    }\r\n    // 2.2删除的节点只有一个子节点\r\n    else if (!current.left) {\r\n      if (current.key === this.root.key) {\r\n        this.root = current.right;\r\n      } else {\r\n        isLeftChild\r\n          ? (parent.left = current.right)\r\n          : (parent.right = current.right);\r\n      }\r\n    } else if (!current.right) {\r\n      if (current.key === this.root.key) {\r\n        this.root = current.left;\r\n      } else {\r\n        isLeftChild\r\n          ? (parent.left = current.left)\r\n          : (parent.right = current.left);\r\n      }\r\n    }\r\n    // 2.3删除的节点有两个子节点\r\n    else {\r\n      // 1.获取后继节点\r\n      const successor = this._getSuccessor(current);\r\n      // 2.判断是否是根节点\r\n      if (current.key === this.root.key) {\r\n        this.root = successor;\r\n      } else if (isLeftChild) {\r\n        parent.left = successor;\r\n      } else {\r\n        parent.right = successor;\r\n      }\r\n      // 3.将删除节点的左子树 = current.left;\r\n      successor.left = current.left;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  // 找后继的方法\r\n  BinarySearchTree.prototype._getSuccessor = function(\r\n    delNode: IBinarySearchTree\r\n  ): IBinarySearchTree {\r\n    // 1.保存变量, 保存找到的后继\r\n    let successor = delNode;\r\n    let current = delNode.right;\r\n    let successorParent = delNode;\r\n\r\n    // 2.循环查找\r\n    while (current) {\r\n      successorParent = successor;\r\n      successor = current;\r\n      current = current.left;\r\n    }\r\n\r\n    // 3.判断找到的后继节点是否直接就是delNode的right节点\r\n    if (successor.key !== delNode.right.key) {\r\n      successorParent.left = successor.right;\r\n      successor.right = delNode.right;\r\n    }\r\n\r\n    return successor;\r\n  };\r\n\r\n  // 清空二叉搜索树\r\n  BinarySearchTree.prototype.clear = function(): void {\r\n    this.root = null;\r\n    id = 0;\r\n  };\r\n\r\n  // 寻找同一层的节点\r\n  BinarySearchTree.prototype.getSiblingNodes = function(node: INode): Array<INode> {\r\n    const sibling: Array<INode> = [];\r\n    this._siblingNode(this.root, node, (node: INode) => sibling.push(node));\r\n    return sibling;\r\n  };\r\n\r\n  BinarySearchTree.prototype._siblingNode = function(tree: INode, node: INode, handler: (node: INode) => void) {\r\n    if (tree.level === node.level && tree.key !== node.key) {\r\n      handler(tree);\r\n    } else {\r\n      tree.left && this._siblingNode(tree.left, node, handler);\r\n      tree.right && this._siblingNode(tree.right, node, handler);\r\n    }\r\n  }\r\n\r\n  // 获取根节点\r\n  BinarySearchTree.prototype.getRoot = function(): INode | null {\r\n    return this.root;\r\n  }\r\n\r\n  // 获取某个子节点是根节点的左子树还有右子树\r\n  BinarySearchTree.prototype.getChildrenFlag = function(node: INode, parent: INode = this.root) : string {\r\n    let type = \"\";\r\n    this._childrenFlag(node, parent, (key: string) => {\r\n      type = key;\r\n    });\r\n    return type;\r\n  }\r\n\r\n  BinarySearchTree.prototype._childrenFlag = function(node: INode, parent: INode, handler: (key: string) => void) {\r\n    if (parent && node?.parent?.id === parent?.id) {\r\n      // node就是parent节点下的第一个子节点, 所以只需要判断这个节点的isLeft就可以\r\n      handler(node.isLeft ? \"left\" : \"right\");\r\n      return true;\r\n    }\r\n    this._childrenFlag(node?.parent, parent, handler);\r\n  }\r\n\r\n  // 获取两节点的共同父节点\r\n  BinarySearchTree.prototype.getParentEqual = function(node: INode, refer: INode): INode | null {\r\n    let parentEqual = null;\r\n    this._parentEqual(node, refer, (equalParent: INode) => {\r\n      parentEqual = equalParent;\r\n    });\r\n    return parentEqual;\r\n  }\r\n\r\n  BinarySearchTree.prototype._parentEqual = function(node: INode, refer: INode, handler: (equalParent: INode) => void) {\r\n    /* 两个节点肯定是在同一个层级, 否则他们不会走到这个方法 */\r\n    // 1.如果有一个的父级是根节点, 就直接返回根节点\r\n    if (node?.parent?.isRoot || refer?.parent?.isRoot) {\r\n      handler(this.root);\r\n      return true;\r\n    }\r\n    // 2.如果node的父级id 和 refer的父级id 相同 则返回这个父级\r\n    if (node?.parent?.id === refer?.parent?.id) {\r\n      handler(node.parent);\r\n      return true;\r\n    }\r\n    this._parentEqual(node?.parent, refer?.parent, handler);\r\n  }\r\n\r\n  // 寻找父级的父级节点(爷爷节点)\r\n  BinarySearchTree.prototype.searchGrandpaNode = function(node: INode) {\r\n    // 如果当前节点不是根节点\r\n    if (!node.isRoot) {\r\n      // 如果当前节点有父节点且父节点为根节点, 则直接返回父节点\r\n      if (node.parent && node.parent.isRoot) return node.parent;\r\n      // 如果当前节点有父节点且父节点不为根节点\r\n      if (node.parent && !node.parent.isRoot) {\r\n        const parent = node.parent;\r\n        // 如果父节点的父节点存在 则返回他\r\n        if (parent.parent) return parent.parent;\r\n        // 如果父节点的父节点不存在 则返回父节点\r\n        if (!parent.parent) return parent;\r\n      }\r\n      if (!node.parent) return node;\r\n    }\r\n    return node;\r\n  }\r\n\r\n}\r\n\r\nexport { BinarySearchTree };\r\n","import { IPQElement } from \"@/interface\";\r\n\r\nfunction PriorityQueue() {\r\n\r\n  this.items = [];\r\n\r\n  function Node(element: any, priority: number) {\r\n    this.element = element;\r\n    this.priority = priority;\r\n  }\r\n\r\n  PriorityQueue.prototype.enqueue = function (element: any, priority: number): void {\r\n    // @ts-ignore\r\n    const queueElement = new Node(element, priority);\r\n    if (this.isEmpty()) {\r\n      this.items.push(queueElement);\r\n    } else {\r\n      let added = false;\r\n      for (let i = 0; i < this.items.length; i++) {\r\n        if (queueElement.priority < this.items[i].priority) {\r\n          this.items.splice(i, 0, queueElement);\r\n          added = true;\r\n          break;\r\n        }\r\n      }\r\n      // 如果新插入的元素比队列中任何一个元素的优先级都低的话, 就把他插入到最后\r\n      if (!added) {\r\n        this.items.push(queueElement)\r\n      }\r\n    }\r\n  }\r\n  PriorityQueue.prototype.dequeue = function (): IPQElement {\r\n    /**\r\n     * @description 移除队列的第一个元素\r\n     * @return {IPQElement} 返回被移除的元素\r\n     **/\r\n    return this.items.shift();\r\n  }\r\n  PriorityQueue.prototype.front = function (): IPQElement {\r\n    /**\r\n     * @decription 查看队列的第一个元素\r\n     * @return {IPQElement} 返回队列的第一个元素\r\n     **/\r\n    return this.items[0];\r\n  }\r\n  PriorityQueue.prototype.isEmpty = function (): boolean {\r\n    return this.items.length === 0;\r\n  }\r\n  PriorityQueue.prototype.size = function (): number {\r\n    return this.items.length;\r\n  }\r\n  PriorityQueue.prototype.toString = function (): string {\r\n    return this.items.toString()\r\n  }\r\n  PriorityQueue.prototype.clear = function (): void {\r\n    this.items = [];\r\n  }\r\n}\r\n\r\n\r\nexport {\r\n  PriorityQueue\r\n}","import { ref, reactive, nextTick } from \"vue\";\nimport { BinarySearchTree } from \"@/datastructure/BinarySearchTree.ts\";\nimport { PriorityQueue } from \"@/datastructure/PriorityQueue.ts\";\nimport { IPriorityQueue } from \"@/interface\";\nimport { sleep, download, reader } from \"@/utils\";\nimport {\n  IOperateGroup,\n  IBinarySearchTreeKey,\n  IBinarySearchTree,\n  IBinarySearchTreeMethods,\n  IBinarySearchTreeMethodsLiteral,\n} from \"@/interface\";\nimport { baseConfig, initConfig } from \"@/config\";\n\n/* 定义一些全局变量 */\nconst tree = ref<IBinarySearchTree>(new (BinarySearchTree as any)());\nconst pq = ref<IPriorityQueue>(new (PriorityQueue as any)());\nconst passNode = ref<string | number>(-1);\nconst inputs = ref<Array<any>>([]);\nconst fileInputs = ref<Array<any>>([]);\nconst root = reactive({\n  el: null,\n  other: null,\n});\nconst controller = reactive({\n  showMax: false,\n  showMin: false,\n  showPreOrderTraversal: false,\n  showMidOrderTraversal: false,\n  showPostOrderTraversal: false,\n  showSearch: false,\n});\n\nconst bstHint = reactive({\n  max: \"\",\n  min: \"\",\n  preOrderTraversal: \"\",\n  midOrderTraversal: \"\",\n  postOrderTraversal: \"\",\n  search: \"\",\n});\nconst operateGroup = ref<Array<IOperateGroup>>([\n  {\n    name: \"插入\",\n    value: \"\",\n    event: \"insert\",\n    rules: [\n      { type: \"number\", message: \"请输入数字\", trigger: \"change\" },\n      { type: \"number\", message: \"请输入数字\", trigger: \"blur\" },\n    ],\n    params: \"val\",\n  },\n  {\n    name: \"删除\",\n    value: \"\",\n    event: \"remove\",\n    rules: [\n      { type: \"number\", message: \"请输入数字\", trigger: \"change\" },\n      { type: \"number\", message: \"请输入数字\", trigger: \"blur\" },\n    ],\n    params: \"val\",\n  },\n  {\n    name: \"查找\",\n    value: \"\",\n    event: \"search\",\n    rules: [\n      { type: \"number\", message: \"请输入数字\", trigger: \"change\" },\n      { type: \"number\", message: \"请输入数字\", trigger: \"blur\" },\n    ],\n    params: \"val\",\n  },\n  {\n    name: \"最大值\",\n    event: \"max\",\n    params: \"Fn\",\n  },\n  {\n    name: \"最小值\",\n    event: \"min\",\n    params: \"Fn\",\n  },\n  {\n    name: \"先序遍历\",\n    event: \"preOrderTraversal\",\n    params: \"Fn\",\n  },\n  {\n    name: \"中序遍历\",\n    event: \"midOrderTraversal\",\n    params: \"Fn\",\n  },\n  {\n    name: \"后序遍历\",\n    event: \"postOrderTraversal\",\n    params: \"Fn\",\n  },\n  {\n    name: \"清空\",\n    event: \"clear\",\n    params: \"Fn\",\n  },\n  {\n    name: \"生成二叉树\",\n    event: \"generateBST\",\n    params: \"val\",\n    type: \"file\",\n    rules: []\n  },\n  {\n    name: \"导出二叉树\",\n    event: \"exportBST\",\n    params: \"Fn\"\n  }\n]);\n\nconst useBST = <T>(props: any, _this: any, args?: T & any) => {\n\n  const { $message } = args;\n\n  /* 重置控制器 */\n  const resetController = () => {\n    bstHint.max = \"\";\n    bstHint.min = \"\";\n    bstHint.preOrderTraversal = \"\";\n    bstHint.midOrderTraversal = \"\";\n    bstHint.postOrderTraversal = \"\";\n    bstHint.search = \"\";\n    passNode.value = -1;\n    controller.showMax = false;\n    controller.showMin = false;\n    controller.showPreOrderTraversal = false;\n    controller.showMidOrderTraversal = false;\n    controller.showPostOrderTraversal = false;\n    controller.showSearch = false;\n    pq.value.clear();\n  };\n\n  // 取出队列中的每一项执行\n  const cycleExecute = async (_pq: { value: IPriorityQueue } = pq, time: number = 400) => {\n    try {\n      while (!_pq.value.isEmpty()) {\n        await sleep(time);\n        const _delay = _pq.value.dequeue().element;\n        _delay();\n      }\n    } catch (error) {\n      $message('优先级队列内部方法出错!')\n      console.log(\"优先级队列内部方法出错\", error);\n    }\n  };\n\n  // @ts-ignore\n  const treeMethods: IBinarySearchTreeMethods = {\n    insert: (value: IBinarySearchTreeKey) => {\n      if (value) {\n        // 1.寻找父节点\n        //  1.1.没有父节点: 将当前的节点作为根节点, 并在插入后初始化offset\n        //  1.2.存在父节点: 根据父节点的offset与isLeft属性判断当前节点的位置\n        let isRoot = false;\n        // @ts-ignore\n        tree.value.insert(Number(value), (parent, key) => {\n          const node = { offset: 0, isLeft: false, isRoot: true, top: 0, level: 0 };\n          if (!parent) {\n            isRoot = true;\n          } else {\n            node.isLeft = key === \"left\";\n            node.offset =\n              key === \"left\"\n                ? parent.offset - initConfig.baseNodeGap\n                : parent.offset + initConfig.baseNodeGap;\n            node.isRoot = false;\n            node.top = parent.top + baseConfig.levelInterval;\n            node.level = parent?.level + 1;\n          }\n          return node;\n        });\n        resetController();\n        if (isRoot) {\n          // 插入后初始化offset\n          nextTick(() => {\n            // @ts-ignore\n            const { left, top } = root.el.getBoundingClientRect();\n            tree.value.root.offset = left;\n            tree.value.root.top = top;\n            tree.value.root.$el = root.el;\n            tree.value.root.level = 0;\n          });\n        }\n      }\n    },\n    remove: async (value: IBinarySearchTreeKey) => {\n      if (value) {\n        resetController();\n        let index = 0;\n        tree.value.remove(Number(value), (key: IBinarySearchTreeKey) => {\n          const element = () => (passNode.value = Number(key));\n          pq.value.enqueue(element, index++);\n        });\n        await cycleExecute();\n      }\n    },\n    search: (key: IBinarySearchTreeKey) => {\n      treeMethods.mostValue(\"search\", \"showSearch\", [Number(key)]);\n    },\n    mostValue: async (method: string, control: string, args: any = []) => {\n      resetController();\n      let index = 0;\n      let temp = null;\n      args = [\n        ...args,\n        (key: IBinarySearchTreeKey) => {\n          temp = key;\n          const element = () => (passNode.value = Number(key));\n          pq.value.enqueue(element, index++);\n        },\n      ];\n      // @ts-ignore\n      const value = tree.value[method](...args);\n      await cycleExecute();\n      // @ts-ignore\n      bstHint[method] = value || temp;\n      // @ts-ignore\n      controller[control] = true;\n    },\n    max: () => {\n      treeMethods.mostValue(\"max\", \"showMax\");\n    },\n    min: () => {\n      treeMethods.mostValue(\"min\", \"showMin\");\n    },\n    orderTraversal: async (method: string, control: string) => {\n      resetController();\n      let index = 0;\n      let value = \"\";\n      // @ts-ignore\n      tree.value[method]((key) => {\n        if (value === \"\") {\n          // @ts-ignore\n          controller[control] = true;\n        }\n        const element = () => {\n          // @ts-ignore\n          passNode.value = Number(key);\n          value += `${key} -> `;\n          // @ts-ignore\n          bstHint[method] = value;\n        };\n        pq.value.enqueue(element, index++);\n      });\n      await cycleExecute();\n      // @ts-ignore\n      bstHint[method] = value + \"null\";\n    },\n    preOrderTraversal: () => {\n      treeMethods.orderTraversal(\"preOrderTraversal\", \"showPreOrderTraversal\");\n    },\n    midOrderTraversal: () => {\n      treeMethods.orderTraversal(\"midOrderTraversal\", \"showMidOrderTraversal\");\n    },\n    postOrderTraversal: () => {\n      treeMethods.orderTraversal(\"postOrderTraversal\", \"showPostOrderTraversal\");\n    },\n    clear: () => {\n      root.el = null;\n      root.other = null;\n      tree.value.clear();\n    },\n    // import file\n    generateBST: () => {\n      const files = fileInputs.value[0].files;\n      if (files.length > 0) {\n        reader(files[0], async (data: any) => {\n          try {\n            resetController();\n            const json = JSON.parse(data);\n            // @ts-ignore\n            const genBSTPQ = ref<IPriorityQueue>(new PriorityQueue());\n            json.data.forEach((key: IBinarySearchTreeKey, index: number) => {\n              // 这里调insert的时候, insert内部会调resetController() 把数据清空\n              const element = () => treeMethods.insert(key);\n              genBSTPQ.value.enqueue(element, index++);\n            })\n            await cycleExecute(genBSTPQ, 250);\n          } catch (error) {\n            $message('导入数据有误, 请检查后重新导入！');\n          }\n        });\n      } else {\n        $message('请先选择文件！');\n      }\n    },\n    exportBST: () => {\n      // 1.调用先序遍历将数字记录下来\n      if (tree.value.root) {\n        const bstArray: Array<number> = [];\n        tree.value.preOrderTraversal((key) => bstArray.push(key as number));\n        download(\"tree.json\", bstArray);\n      } else {\n        $message('当前没有数据！');\n      }\n    }\n  };\n\n  const handleClick = (group: IOperateGroup) => {\n    const method: IBinarySearchTreeMethodsLiteral = group.event;\n    // @ts-ignore\n    treeMethods[method](group.value as any);\n    group.value = \"\";\n  };\n\n  // 获取二叉搜索树根节点\n  const handleReceiveRoot = (component: any) => {\n    if (!root.el && component) {\n      root.el = component.$el;\n      root.other = component;\n    }\n  };\n\n  // 接收输入框ref\n  const receiveInput = (component: any, group: IOperateGroup) => {\n    nextTick(() => {\n      const inputElm = component.$refs.rawFile;\n      inputElm && inputs.value.push(inputElm);\n      if (group.type === \"file\" && inputElm) {\n        fileInputs.value.push(inputElm);\n      }\n    })\n  }\n\n  return {\n    resetController,\n    cycleExecute,\n    operateGroup,\n    handleClick,\n    treeMethods,\n    handleReceiveRoot,\n    receiveInput,\n    tree,\n    pq,\n    passNode,\n    inputs,\n    fileInputs,\n    root,\n    controller,\n    bstHint\n  }\n}\n\nexport default useBST;\n\nexport { useBST };\n","\nimport { defineComponent, provide, inject } from \"vue\";\nimport Input from \"@/components/Input.vue\";\nimport Button from \"@/components/Button.vue\";\nimport BinarySearchTreeItem from \"@/components/tree/BinarySearchTreeItem.vue\";\nimport { IMessage } from \"@/interface/IUse\";\nimport { useBST } from '@/use/UseBST.ts';\n\nexport default defineComponent({\n  name: \"BinarySearchTree\",\n  components: {\n    \"v-input\": Input,\n    \"v-btn\": Button,\n    BinarySearchTreeItem,\n  },\n  setup(props, context) {\n    const $message: IMessage = inject(\"message\") as IMessage;\n\n    const use = useBST(props, context, { $message });\n    provide(\"tree\", use.tree.value);\n\n    return { ...use };\n  },\n});\n","import { render } from \"./BinarySearchTree.vue?vue&type=template&id=520e6b03&scoped=true\"\nimport script from \"./BinarySearchTree.vue?vue&type=script&lang=ts\"\nexport * from \"./BinarySearchTree.vue?vue&type=script&lang=ts\"\n\nimport \"./BinarySearchTree.vue?vue&type=style&index=0&id=520e6b03&scoped=true&lang=css\"\nscript.render = render\nscript.__scopeId = \"data-v-520e6b03\"\n\nexport default script","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js??ref--0-1!./BinarySearchTree.vue?vue&type=style&index=0&id=520e6b03&scoped=true&lang=css\"","'use strict';\nvar fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');\nvar anObject = require('../internals/an-object');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar sameValue = require('../internals/same-value');\nvar regExpExec = require('../internals/regexp-exec-abstract');\n\n// @@search logic\nfixRegExpWellKnownSymbolLogic('search', 1, function (SEARCH, nativeSearch, maybeCallNative) {\n  return [\n    // `String.prototype.search` method\n    // https://tc39.es/ecma262/#sec-string.prototype.search\n    function search(regexp) {\n      var O = requireObjectCoercible(this);\n      var searcher = regexp == undefined ? undefined : regexp[SEARCH];\n      return searcher !== undefined ? searcher.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));\n    },\n    // `RegExp.prototype[@@search]` method\n    // https://tc39.es/ecma262/#sec-regexp.prototype-@@search\n    function (regexp) {\n      var res = maybeCallNative(nativeSearch, regexp, this);\n      if (res.done) return res.value;\n\n      var rx = anObject(regexp);\n      var S = String(this);\n\n      var previousLastIndex = rx.lastIndex;\n      if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;\n      var result = regExpExec(rx, S);\n      if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;\n      return result === null ? -1 : result.index;\n    }\n  ];\n});\n","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js??ref--0-1!./Button.vue?vue&type=style&index=0&id=b680969c&scoped=true&lang=css\"","'use strict';\nvar $ = require('../internals/export');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\nvar toInteger = require('../internals/to-integer');\nvar toLength = require('../internals/to-length');\nvar toObject = require('../internals/to-object');\nvar arraySpeciesCreate = require('../internals/array-species-create');\nvar createProperty = require('../internals/create-property');\nvar arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');\n\nvar HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('splice');\n\nvar max = Math.max;\nvar min = Math.min;\nvar MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;\nvar MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded';\n\n// `Array.prototype.splice` method\n// https://tc39.es/ecma262/#sec-array.prototype.splice\n// with adding support of @@species\n$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT }, {\n  splice: function splice(start, deleteCount /* , ...items */) {\n    var O = toObject(this);\n    var len = toLength(O.length);\n    var actualStart = toAbsoluteIndex(start, len);\n    var argumentsLength = arguments.length;\n    var insertCount, actualDeleteCount, A, k, from, to;\n    if (argumentsLength === 0) {\n      insertCount = actualDeleteCount = 0;\n    } else if (argumentsLength === 1) {\n      insertCount = 0;\n      actualDeleteCount = len - actualStart;\n    } else {\n      insertCount = argumentsLength - 2;\n      actualDeleteCount = min(max(toInteger(deleteCount), 0), len - actualStart);\n    }\n    if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) {\n      throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);\n    }\n    A = arraySpeciesCreate(O, actualDeleteCount);\n    for (k = 0; k < actualDeleteCount; k++) {\n      from = actualStart + k;\n      if (from in O) createProperty(A, k, O[from]);\n    }\n    A.length = actualDeleteCount;\n    if (insertCount < actualDeleteCount) {\n      for (k = actualStart; k < len - actualDeleteCount; k++) {\n        from = k + actualDeleteCount;\n        to = k + insertCount;\n        if (from in O) O[to] = O[from];\n        else delete O[to];\n      }\n      for (k = len; k > len - actualDeleteCount + insertCount; k--) delete O[k - 1];\n    } else if (insertCount > actualDeleteCount) {\n      for (k = len - actualDeleteCount; k > actualStart; k--) {\n        from = k + actualDeleteCount - 1;\n        to = k + insertCount - 1;\n        if (from in O) O[to] = O[from];\n        else delete O[to];\n      }\n    }\n    for (k = 0; k < insertCount; k++) {\n      O[k + actualStart] = arguments[k + 2];\n    }\n    O.length = len - actualDeleteCount + insertCount;\n    return A;\n  }\n});\n","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js??ref--0-1!./BinarySearchTreeLine.vue?vue&type=style&index=0&id=07c15265&scoped=true&lang=css\""],"sourceRoot":""}